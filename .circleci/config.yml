version: 2.1
executors:
  node-13:
    docker:
      - image: circleci/node:13.8.0
  python-37:
    docker:
      - image: python:3.7-alpine3.11
  aws-cli:
    docker:
      - image: amazon/aws-cli

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} &&
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            export SUCCESS=$(curl --insecure  https://kvdb.io/NeBYPkxnjUK1maXWXLpyqA/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if(( $SUCCESS==1 )); 
            then
             cd ~/project/backend
             npm install
             npm run migrations:revert
            fi            

jobs:
  build-frontend:
    executor: node-13
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend &&
            npm install &&
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build                   
  build-backend:
    executor: node-13
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-cache]
      - run:
          name: Back-end build
          command: |
             cd backend &&
             npm install &&
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build-cache   
  test-frontend:
    executor: node-13
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Start Testing Frontend
          command: |
             cd frontend && npm install && npm run test
  test-backend:
    executor: node-13
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-cache]
      - run:
          name: Start Testing Backend
          command: |
             cd backend && npm install && npm run test
  scan-frontend:
    executor: node-13
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Start Scaning Frontend
          command: |
             cd frontend && npm install &&
             npm audit fix --audit-level=critical --force &&
             npm audit --audit-level=critical    
  scan-backend:
    executor: node-13
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-cache]
      - run:
          name: Start Testing Backend
          command: |
             cd backend && npm install && 
             npm audit fix --audit-level=critical --force &&
             npm audit fix --force &&
             npm audit --audit-level=critical                                  

  deploy-infrastructure:
    executor: aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --region us-east-1 
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --region us-east-1 
      - run:
          name: Add back-end ip to ansible inventory
          command: |
           aws ec2 describe-instances  --query 'Reservations[*].Instances[*].PublicIpAddress' \
           --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text >> .circleci/ansible/inventory.txt
      - run:
          name : Check Indentory File
          command : |
            cat .circleci/ansible/inventory.txt       
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment  
  configure-infrastructure:
    executor: python-37
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["2c:7a:e8:58:47:24:86:92:bb:cc:e2:88:45:bf:d7:4a"] 
      - attach_workspace:
          at: ~/
      - run:
         name : Check Indentory File
         command : |
           cat .circleci/ansible/inventory.txt   
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible gzip tar
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible && 
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment        
  
  run-migrations:
    executor: node-13
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-cache]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                curl --insecure https://kvdb.io/NeBYPkxnjUK1maXWXLpyqA/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - revert-migrations    
  deploy-frontend:
      executor: python-37
      steps:
        - checkout
        - run:
            name: Install dependencies
            command: |
              apk add --update nodejs npm curl
              pip install awscli
              aws --version
        - run:
            name: Get backend url
            command: |
              export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
              export API_URL="http://${BACKEND_IP}:3030"
              echo "${API_URL}"
              echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
              cat frontend/.env
        - run:
            name: Deploy frontend objects
            command: |
              cd frontend
              npm install
              npm run build
              tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
              aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
        - destroy-environment
        - revert-migrations     
  deploy-backend:
    executor: python-37
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["2c:7a:e8:58:47:24:86:92:bb:cc:e2:88:45:bf:d7:4a"]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build-cache]       
      - run:
          name: Install dependencies
          command: |
            apk add  tar gzip ansible nodejs npm curl
            pip install awscli 
      - run:
          name: Init Env. Variables
          command: |
            cd backend
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ".env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ".env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"     
      - run:
          name: Build Backend
          command: |
            cd backend
            npm i
            npm run build
      - run:
          name: Zip Directory
          command: |
            # Zip the directory
            tar -C backend -czvf backend.tar.gz .
            mv backend.tar.gz ~/project/.circleci/ansible/roles/deploy/files/backend.tar.gz  
            echo "Dir Content -------"
            cd ~/project/.circleci/ansible/roles/deploy/files
            ls -la   
      - run:
          name: Deploy backend
          command: |
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            echo "Run Ansible Deploy Role -------"
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment
      - revert-migrations      

  smoke-test:
    executor: python-37
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update nodejs npm curl
            pip install awscli
      - run:
          name: Backend smoke test.
          command: |
            # Get Backend API
            BACKEND_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)

            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - destroy-environment
      - revert-migrations  
  cloudfront-update:
    executor: python-37
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add  tar gzip ansible nodejs npm curl
            pip install awscli 
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name "udapeople-green-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople

            echo Green Cloudfront : "udapeople-green-${CIRCLE_WORKFLOW_ID:0:7}"
            echo Blue Cloudfront "udapeople-${CIRCLE_WORKFLOW_ID:0:7}" 

      - destroy-environment
      - revert-migrations  
  cleanup:
      executor: aws-cli
      steps:
        # - run:
        #     name: Get old stack workflow id
        #     command: |
        #       export OLD_WORKFLOW_ID=$(aws cloudformation \
        #             list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
        #             --no-paginate --output text)
        #       export OLD_WORKFLOW_ID=$(echo "$OLD_WORKFLOW_ID" | sed 's/udapeople-//')
        #       echo OLD_WORKFLOW_ID : "${OLD_WORKFLOW_ID}"
        #       echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
              # Fetch the stack names          
              # export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              #         --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
              # echo Stack names: "${STACKS[@]}" 
        - run:
            name: Remove old stacks and files
            command: |
              export OLD_WORKFLOW_ID=$(aws cloudformation \
                list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                --no-paginate --output text)
              export OLD_WORKFLOW_ID=$(echo "$OLD_WORKFLOW_ID" | sed 's/udapeople-//')
              echo OLD_WORKFLOW_ID : "${OLD_WORKFLOW_ID}"
              echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
              # if [[ "${OLD_WORKFLOW_ID}" =~ "${STACKS[@]}"  ]]
              if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OLD_WORKFLOW_ID}" ]]
              then
                echo Deleting Old workflows: "${OLD_WORKFLOW_ID}"
                aws s3 rm "s3://udapeople-${OLD_WORKFLOW_ID}" --recursive
                aws cloudformation delete-stack --stack-name "udapeople-backend-${OLD_WORKFLOW_ID}"
                aws cloudformation delete-stack --stack-name "udapeople-frontend-${OLD_WORKFLOW_ID}"
              else
                echo "All Clear"
              fi
              

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
         requires: [build-frontend]
      - test-backend:
         requires: [build-backend]   
      - scan-frontend:
          requires: [build-frontend]     
      - scan-backend:
          requires: [build-backend]      
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]   
      - configure-infrastructure:
          requires: [deploy-infrastructure]          
      - run-migrations:
          requires: [configure-infrastructure]      
      - deploy-frontend:
          requires: [run-migrations]                         
      - deploy-backend:
          requires: [run-migrations]   
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]            
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]                      